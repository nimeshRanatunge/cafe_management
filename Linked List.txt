
class Node{
    int data;
    Node next;

    public Node(int data){
        this.data = data;
        this.next = null;
    }
}

class LinkedList{
    Node head;
    public LinkedList(){
        head = null;
    }
    public void append(int data){
        Node new_node = new Node(data);
        if(head==null){
            head = new_node;
        }
        else{
            Node current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = new_node;
        }
    }

     // Insert a new node at the beginning of the linked list
    void prepend(int data) {
        Node newNode = new Node(data);
        newNode.next = head;
        head = newNode;
    }

    public void traverse(){
        Node current = head;
        while (current != null) {
            System.out.print(current.data+" -> ");
            current = current.next;
        }
        System.out.println("null");
    }
    public String delete(int data){
        if(head==null) return "No list";
        if(head.data == data) head = head.next;
        else{
            Node current = head;
            while(current.next!=null){
                if(current.next.data == data){
                    current.next = current.next.next;
                }
                current = current.next;
            }
        }
        return "deleted!";
    }
    public void update(int index, int data){
            Node current = head;
            int i = 0;
            while (current!=null) {
                if(i==index)
                {
                    current.data = data;
                }
                current = current.next;
                i++;
        } 
    }
}

public class Main {
    public static void main(String[] args) {
       LinkedList linkedList = new LinkedList();
       linkedList.append(20);
       linkedList.append(34);
       linkedList.append(11);
       linkedList.append(90);
       linkedList.append(87);
       linkedList.traverse();
       linkedList.delete(90);
       linkedList.traverse();
       linkedList.update(3, 99);
       linkedList.traverse();
    }

}